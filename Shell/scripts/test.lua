---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Ben.
--- DateTime: 10/14/2019 8:45 PM
---


function tprint(t, indent)
    if not indent then indent = 1, print(tostring(t) .. " {") end
    if t then
        for key,value in pairs(t) do
            if not string.starts(tostring(key), "__") then
                local formatting = string.rep("    ", indent) .. tostring(key) .. ": ";
                if value and type(value) == "table" then
                    print(formatting .. tostring(value) .. " {")
                    tprint(value, indent+1);
                else
                    print(formatting .. tostring(value))
                end
            end
        end
        print(string.rep("    ", indent - 1) .. "}")
    end
end



mytable = {
    a = "one",
    b = "two",
}

mytable.c = mytable.a

print(" testing table " .. tostring(mytable.c))
--if (true and true and true) or false then
--    print("true")
--end
--
--local function myFunc()
--    print(debug.getinfo(1, "n").name);
--end
--myFunc()
--
REP = 1;
CIS = 2;
ALL = 3
IMP = 4

planetFleet = {
    ["kam"] = {},
    ["geo"] = {},
    ["hot"] = {
        teams = ALL
    },
    ["cor"] = {
        teams = IMP
    }
}

--table.insert(planetFleet.kam, {
--    id = 1,
--    team = 1,
--    units = {
--        a=1,
--        b=2,
--        c=3,
--    },
--    reinforcements=200,
--
--})

--fleet = {
--    id = 0,
--    team = 1,
--    units = {
--        a=1,
--        b=2,
--        c=3,
--    },
--    reinforcements=200,
--    makeNewFleet = function(self, newobject, team)
--        newobject = newobject or {}   -- create object if user does not provide one
--        setmetatable(newobject, self)
--        self.__index = self
--
--        self.id = self.id + 1
--        newobject.id = self.id
--
--        newobject.team = team
--
--        return newobject
--    end,
--    setReinforcements = function(self, reinforcements)
--        self.reinforcements = reinforcements
--        return self
--    end
--}

mytable = {
    fleet = {
        id = 0,
        team = 1,
        units = {
            a=1,
            b=2,
            c=3,
        },
        reinforcements=200,
        makeNewFleet = function(self, newobject, team)
            newobject = newobject or {}   -- create object if user does not provide one
            setmetatable(newobject, self)
            self.__index = self

            self.id = self.id + 1
            newobject.id = self.id

            newobject.team = team

            return newobject
        end,
        setReinforcements = function(self, reinforcements)
            self.reinforcements = reinforcements
            return self
        end
    }
}

planetFleet['kam'] = mytable.fleet:makeNewFleet(nil,1)

table.insert(planetFleet['geo'], mytable.fleet:makeNewFleet(nil,1))
table.insert(planetFleet['geo'], mytable.fleet:makeNewFleet(nil,2):setReinforcements(100))

--todo all fleet are referring to the same object. need to make new fleet instance. AKA make a fleet class

print("first id fleet " .. planetFleet['geo'][1].id)
print("second id fleet " .. planetFleet['geo'][2].id)

--table.insert(planetFleet.kam.fleets, {
--    id = 4,
--    team = 2,
--    units = {
--        a=1,
--        b=2,
--        c=3,
--    },
--    reinforcements=350
--})


function printplanet(planet)
    print("planet fleet " .. tostring(planetFleet[planet]['fleets'][2]['id']))
end

--printplanet('kam')

--print("planet fleet " .. tostring(planetFleet['kam']['fleets'][2]['reinforcements']))
--
---- set team for each planet
--planetTeam = {
--    ["cor"] = REP,
--    ["dag"] = REP,
--    ["fel"] = CIS,
--    ["geo"] = CIS,
--    ["kam"] = REP,
--    ["kas"] = REP,
--    ["mus"] = CIS,
--    ["myg"] = CIS,
--    ["nab"] = REP,
--    ["pol"] = REP,
--    ["tat"] = REP,
--    ["uta"] = CIS,
--    ["yav"] = CIS,
--}
--
--planetFleet = {
--    ["kam"] = REP,
--    ["geo"] = CIS,
--}
--
--print("planet team for aaa is " .. tostring(planetTeam["aaa"]))
--
--nilTeam = planetFleet["aaa"]

--planetFleet["aaa"] = 3
--
--nilTeam = planetFleet["aaa"]

--if nilTeam then
--    print("team IS NOT undefined, is " .. tostring(nilTeam))
--else
--    print("team IS undefined, is " .. tostring(nilTeam))
--end
--
--
---- associate codes with teams
--teamCode = {
--    [1] = "rep",
--    [2] = "cis",
--    [3] = "all",
--    [4] = "imp"
--}
--
--playerTeam = 2
--nextTeam = 0
--for teamNumber, teamString in ipairs(teamCode) do
--
--    print("team number is " .. teamNumber)
--
--    if teamNumber == playerTeam then
--
--        print("team is the same as player team")
--
--        -- if there is another team after this one select that
--        if teamCode[ teamNumber + 1 ] then
--            nextTeam = teamNumber + 1
--            print(">>>>>>>>>>>>>>>>> selected for next team:" .. tostring(teamCode[teamNumber + 1]))
--        else
--            -- else start at beginning
--            nextTeam = 1 -- arrays start at 1
--            print(">>>>>>>>>>>>>>>>> selected for next team:" .. tostring(teamCode[1]))
--        end
--    else
--        print("ERROR: player team not found in this.teamCode table")
--    end
--end
--
--print("nextTeam is " .. nextTeam)
--
--
---- teams which are not playerTeam
--otherTeams = {}
--for teamNumber, teamString in ipairs(teamCode) do
--    if teamNumber ~= playerTeam then
--        table.insert(otherTeams, teamNumber)
--    end
--end
--
--for key, val in ipairs(otherTeams) do
--
--    print(otherTeams[key])
--
--    --print("index is " .. key)
--    --print("value is " .. val)
--end