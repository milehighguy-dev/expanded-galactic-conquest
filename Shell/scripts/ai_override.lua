---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Ben.
--- DateTime: 11/21/2019 10:34 PM
---

---------------------------
--  begin ifs_freeform_ai
---------------------------

-- play an AI turn
ifs_freeform_ai.Enter = function(this, bFwd)
    print("ifs_freeform_ai.Enter")
    -- get the ai team
    local myteam = ifs_freeform_main.playerTeam
    print("AI turn", ifs_freeform_main.turnNumber)

    -- calculate planet weights
    this:CalculateWeights(myteam)

    -- start with purchase item update
    this.Update = this.CalculatePurchaseItem

    -- set the camera zoom
    ifs_freeform_main:SetZoom(1)
end

-- calculate weights for each planet
ifs_freeform_ai.CalculateWeights = function(this, myteam)
    print("ifs_freeform_ai.CalculateWeights")
    -- clear out planet weights
    for planet, _ in pairs(ifs_freeform_main.planetDestination) do
        this.planetValue[planet] = 0
        this.defenseValue[planet] = { [false] = 0, [true] = 0 }
    end

    -- for each planet...
    for planet, team in pairs(ifs_freeform_main.planetTeam) do
        local weight = 0
        local defense = false

        -- if the planet is not neutral...
        if team > 0 then
            -- use defense value if mine
            defense = team == myteam

            -- get odds of planet victory
            -- (should calculate based on purchases)
            local planetwin = 0.5

            -- get planet value
            local value = ifs_freeform_main.planetValue[planet]

            -- win gets:
            -- planet victory value
            -- intrinsic value of the planet
            -- scaled value of any port
            local winvalue = value.victory + value.turn * this.turncount
            --				if ifs_freeform_main.planetPort[planet] then
            --					winvalue = winvalue + this.portscore * this.enemyvaluescale
            --				end

            -- lose gets:
            -- planet defeat value
            -- negative value of my fleet
            local losevalue = value.defeat - this.fleetscore

            -- calculate conditional value
            weight = planetwin * winvalue + (1 - planetwin) * losevalue
        end

        -- if the planet has a fleet...
        fleet = ifs_freeform_main.planetFleet[planet]
        if fleet then
            -- use defense value if mine
            defense = ifs_freeform_main:fleetOnTeamIsOnlyPresent(fleet, myteam)

            -- get odds of fleet victory
            -- (should calculate based on purchases)
            local fleetwin = 0.5

            -- get space value
            local value = ifs_freeform_main.spaceValue

            -- win gets:
            -- space victory value
            -- scaled value of enemy fleet
            -- underlying planet value
            local winvalue = value.victory + this.fleetscore * this.enemyvaluescale + weight

            -- lose gets:
            -- space defeat value
            -- negative value of my fleet
            local losevalue = value.defeat - this.fleetscore

            -- calculate conditional value
            weight = fleetwin * winvalue + (1 - fleetwin) * losevalue
        end

        -- scale weight by battle recency
        for i, p in ipairs(ifs_freeform_main.recentPlanets) do
            if p == planet then
                weight = weight * math.pow(2, i-4)		-- 1/8, 1/4, 1/2
                break
            end
        end

        -- if the planet is worth anything...
        if weight > 0 then
            -- spread weight around
            for p, scale in pairs(this.weightScale[planet]) do
                this.defenseValue[p][defense] = this.defenseValue[p][defense] + weight * scale
            end
        end
    end

    -- for each fleet...
    local fleetThreat = { }
    for planet, fleetList in pairs(ifs_freeform_main.planetFleet) do
        -- use defense value if mine
        local defense = ifs_freeform_main:fleetOnTeamIsOnlyPresent(fleetList, myteam)

        -- calculate threat value
        -- (use the offensive value the fleet sees at that location)
        local threat = this.threatscale * this.defenseValue[planet][not defense]

        -- save fleet threat
        fleetThreat[planet] = { defense, threat }
    end

    -- for each fleet threat...
    for planet, values in pairs(fleetThreat) do
        local defense = values[1]
        local threat = values[2]

        -- spread weight around
        for p, scale in pairs(this.weightScale[planet]) do
            this.defenseValue[p][defense] = this.defenseValue[p][defense] + threat * scale
        end
    end

    -- create combined value
    for planet, value in pairs(this.defenseValue) do
        this.planetValue[planet] = value[false] * this.aggression + value[true] * (1-this.aggression)
    end
end

-- determine if and where to build a fleet
ifs_freeform_ai.CalculateBuildFleet = function(this, fDt)
    print("ifs_freeform_ai.CalculateBuildFleet")
    -- default to calculate move fleet
    this.displayTime = -1
    this.Update = this.CalculateMoveFleet

    -- get my team
    local myteam = ifs_freeform_main.playerTeam

    -- update fleet cost
    ifs_freeform_fleet:UpdateFleetCost()

    -- if there is enough resources to build a fleet...
    local funds = ifs_freeform_main.teamResources[myteam]
    local cost = ifs_freeform_fleet.fleetCost
    print("funds:", funds, "fleet cost:", cost)
    if cost and funds >= cost then
        print("purchase fleet?")

        -- create baseline value for my non-fleet planets
        local fleetWeight = {}
        for planet, team in pairs(ifs_freeform_main.planetTeam) do
            if team == myteam and not ifs_freeform_main.planetFleet[planet] then
                fleetWeight[planet] = 1
            end
        end

        -- for each fleet in the galaxy...
        for planet, fleetList in pairs(ifs_freeform_main.planetFleet) do
            -- decrease weight for friendly fleets, increase for enemy fleets
            local weight = ifs_freeform_main:fleetOnTeamIsOnlyPresent(fleetList, myteam) and -1 or 1
            -- spread weight around
            for p, scale in pairs(this.weightScale[planet]) do
                if fleetWeight[p] then
                    fleetWeight[p] = fleetWeight[p] + weight * scale
                end
            end
        end

        -- for each potential location...
        local totalWeight = 0
        for planet, weight in pairs(fleetWeight) do
            -- scale by planet value
            fleetWeight[planet] = math.pow(2, 0.2 * this.planetValue[planet] + 2 * fleetWeight[planet])
            print ("planet weight", planet, weight, fleetWeight[planet])
            totalWeight = totalWeight + fleetWeight[planet]
        end
        print ("total weight:", totalWeight)

        -- pick a location
        local scaledWeight = cost == 0 and totalWeight or totalWeight * funds / (funds - cost * 0.75)	--+ (cost - ifs_freeform_fleet_cost[0]) * cost / funds
        local randomWeight = math.random() * scaledWeight
        print ("scaled weight:", scaledWeight, randomWeight)
        for planet, weight in pairs(fleetWeight) do
            randomWeight = randomWeight - weight
            if randomWeight <= 0 then
                print ("purchase fleet:", planet)

                -- go to update build port
                ifs_freeform_main:SelectPlanet(nil, planet)
                this.displayTime = 2.0
                this.Update = this.UpdateBuildFleet
                break
            end
        end
    end

    -- perform visible update
    this:Update(fDt)
end

-- pick a fleet movement
ifs_freeform_ai.CalculateMoveFleet = function(this, fDt)
    print("ifs_freeform_ai.CalculateMoveFleet")
    -- default to done
    this.displayTime = -1
    this.Update = this.UpdateDone

    -- get my team
    local myteam = ifs_freeform_main.playerTeam

    -- get weighted move values
    local moveWeight = {}
    local totalWeight = 0
    for planet, fleetList in pairs(ifs_freeform_main.planetFleet) do
        for fleetIndex, fleetObj in ipairs(fleetList) do
            if fleetObj.team == myteam then
                local reference = this.planetValue[planet]
                for _, destination in ipairs(ifs_freeform_main.planetDestination[planet]) do
                    if not ifs_freeform_main:fleetOnTeamIsOnlyPresent(ifs_freeform_main.planetFleet[destination], myteam) then
                        local weight = math.pow(2, 0.2 * (this.planetValue[destination] - reference))
                        moveWeight[{planet, destination}] = weight
                        print(planet, destination, weight)
                        totalWeight = totalWeight + weight
                    end
                end
            end

        end
    end

    -- get a random move
    local randomWeight = math.random() * totalWeight

    -- for each possible move...
    for move, weight in pairs(moveWeight) do
        -- deduct the move's weight
        randomWeight = randomWeight - weight

        -- if this move is the selected one...
        if randomWeight <= 0 then
            -- get the start and next planets
            local start = move[1]
            local next = move[2]

            -- select the start planet
            ifs_freeform_main:SelectPlanet(nil, start)

            -- aim towards the next planet
            ifs_freeform_main.planetNext = next

            -- go to update move fleet
            this.displayTime = 2.0
            this.Update = this.UpdateMoveFleet
            break
        end
    end

    -- perform visible updtae
    this:Update(fDt)
end

--TODO this function is not being updated somehow? none of the ai functions are
--UPDATE I think i solved it by putting in separate file

-- determine which item to buy
ifs_freeform_ai.CalculatePurchaseItem = function(this, fDt)
    print("ifs_freeform_ai.CalculatePurchaseItem")
    -- default to calculate build fleet
    this.displayTime = -1
    this.Update = this.CalculateBuildFleet

    -- get my team
    local myteam = ifs_freeform_main.playerTeam

    -- teams which are not playerTeam
    local otherTeams = {}
    for teamNumber, teamString in ipairs(this.teamCode) do
        if teamNumber ~= myteam then
            table.insert(otherTeams, teamNumber)
        end
    end

    -- selection table
    local totalWeight = 0
    local itemWeight = {}

    local funds = ifs_freeform_main.teamResources[myteam]
    print("funds:", funds)

    print("purchase unit/tech? HHHELLLOOOO")

    print("                         going to print purchase unit owned")
    tprint(ifs_purchase_unit_owned)

    --TODO fix error where it cannot iterate through this
    -- count value of opponent's units
    local enemy_units = 100		-- bias
    for index, teamNumber in ipairs(otherTeams) do
        print(" team number is " .. tostring(teamNumber))
        print(" purchase unit owned is " .. tostring(ifs_purchase_unit_owned[teamNumber]))
        for unit, owned in pairs(ifs_purchase_unit_owned[teamNumber]) do
            if owned then
                print ("opponent unit", unit, ifs_purchase_unit_cost[unit])
                enemy_units = enemy_units + ifs_purchase_unit_cost[unit]
            end
        end
    end
    print ("unit scale", enemy_units)

    -- for each potential unit...
    for _, unit in ipairs(ifs_purchase_unit_types) do
        -- if not already owned...
        if not ifs_purchase_unit_owned[myteam][unit] and ifs_purchase_unit_cost[unit] <= funds then
            -- add to the list
            local weight = enemy_units / ifs_purchase_unit_cost[unit]
            local unit = unit		--fix closure
            print ("unit weight", unit, weight)
            itemWeight[function() this:PurchaseUnit(myteam, unit) end] = weight
            totalWeight = totalWeight + weight
        end
    end

    -- check if using slots are free
    local using_free = false
    for slot, using in ipairs(ifs_purchase_tech_using[myteam]) do
        if using == 0 then
            using_free = true
            break
        end
    end

    -- if there are free slots...
    if using_free then
        -- count value of opponent's tech
        local enemy_tech = 40		-- bias
        for index, teamNumber in ipairs(otherTeams) do
            for _, using in pairs(ifs_purchase_tech_using[teamNumber]) do
                if using > 0 then
                    local tech = ifs_purchase_tech_table[using]
                    print ("opponent tech", tech.name, tech.cost[true])
                    enemy_tech = enemy_tech + tech.cost[true]
                end
            end

        end
        print ("tech scale", enemy_tech)

        -- for each potential tech...
        local totalWeight = 0
        local techWeight = {}
        for index, tech in ipairs(ifs_purchase_tech_table) do
            -- get whether the tech is owned
            local owned = ifs_purchase_tech_cards[myteam][index]

            if tech.cost[owned] <= funds then
                -- add to the list
                local weight = enemy_tech / tech.cost[owned]
                local index = index		-- fix closure
                print ("tech weight", tech.name, weight)
                itemWeight[function() this:PurchaseTech(myteam, index) end] = weight
                totalWeight = totalWeight + weight
            end
        end
    end

    -- pick an item
    local randomWeight = math.random() * totalWeight
    print ("scaled weight:", totalWeight, randomWeight)
    for item, weight in pairs(itemWeight) do
        randomWeight = randomWeight - weight
        if randomWeight <= 0 then
            item()
            break
        end
    end

    -- perform visible update
    this:Update(fDt)
end

-- update build fleet
ifs_freeform_ai.UpdateBuildFleet = function(this, fDt)
    print("ifs_freeform_ai.UpdateBuildFleet")
    -- get my team
    local myteam = ifs_freeform_main.playerTeam

    -- get the selected planet
    local selected = ifs_freeform_main.planetSelected

    -- if the display time elapses...
    this.displayTime = this.displayTime - fDt
    if this.displayTime <= 0 then
        -- if there is a fleet...
        if ifs_freeform_main.planetFleet[selected] then
            -- go to calculate move fleet
            this.Update = this.CalculateMoveFleet
        else
            -- build the fleet and show it
            ifs_freeform_fleet:BuildFleet(myteam, selected)
            this.displayTime = 1.0
        end
    end

    if not ifs_freeform_main.planetFleet[selected] then
        ifs_freeform_main:DrawFleetIcon(selected, myteam, true, true)
    end

    -- for each starting planet...
    for planet1, destinations in pairs(ifs_freeform_main.planetDestination) do
        -- for each potential destination...
        for _, planet2 in ipairs(destinations) do
            if planet1 < planet2 then
                -- draw a white link
                DrawBeamBetween(
                        ifs_freeform_main.planetMatrix[planet1][0],
                        ifs_freeform_main.planetMatrix[planet2][0],
                        "lane_selected", 1.0, 255, 255, 255, 32
                )
            end
        end
    end

    -- call common update
    this:UpdateCommon(fDt)
end

ifs_freeform_ai.UpdateMoveFleet = function(this, fDt)
    print("ifs_freeform_ai.UpdateMoveFleet")
    -- get the start and next planet
    local start = ifs_freeform_main.planetSelected
    local next = ifs_freeform_main.planetNext

    -- for each starting planet...
    local playerTeam = ifs_freeform_main.playerTeam
    for planet1, destinations in pairs(ifs_freeform_main.planetDestination) do
        -- for each potential destination...
        for _, planet2 in ipairs(destinations) do
            if planet1 < planet2 then
                --					-- get the link team
                --					local planet1Team = ifs_freeform_main.planetFleet[planet1] or ifs_freeform_main.planetTeam[planet1]
                --					local planet2Team = ifs_freeform_main.planetFleet[planet2] or ifs_freeform_main.planetTeam[planet2]
                --					local linkTeam
                --					if planet1Team == planet2Team then
                --						linkTeam = planet1Team
                --					elseif planet1Team == enemyTeam or planet2Team == enemyTeam then
                --						linkTeam = enemyTeam
                --					else
                --						linkTeam = 0
                --					end
                -- color the lane based on the link team
                --					local r,g,b = ifs_freeform_main:GetTeamColor(linkTeam)
                local a = 200
                local shift = 0
                local repetitions = 1
                if planet1 ~= start and planet2 ~= start then
                    a = 32
                elseif next ~= start and (planet1 == next or planet2 == next) then
                    a = 255
                    if planet1 == next then
                        shift = 2 * ScriptCB_GetMissionTime()
                    else
                        shift = -2 * ScriptCB_GetMissionTime()
                    end
                    repetitions = 8
                end
                DrawBeamBetween(
                        ifs_freeform_main.planetMatrix[planet1][0],
                        ifs_freeform_main.planetMatrix[planet2][0],
                        "lane_selected", 1.0, 255, 255, 255, a, shift, repetitions
                )
            end
        end
    end

    this.displayTime = this.displayTime - fDt
    if this.displayTime <= 0 then
        if start ~= next then
            -- move the fleet
            ifs_freeform_main:MoveFleet(playerTeam, start, next)
            ifs_freeform_main:SelectPlanet(nil, next)

            -- show the result
            if this.autoaccept then
                this.displayTime = 1.0
            else
                this.displayTime = 1e38
            end
        else
            -- if the destination planet is an enemy, or there is a fleet battle...
            if ifs_freeform_main.planetTeam[next] ~= playerTeam
                    and ifs_freeform_main.planetTeam[next] ~= playerTeam
                    and ifs_freeform_main.planetTeam[next] ~= 0
                    and ifs_freeform_main.planetTeam[next] ~= nil
                    or
                    ifs_freeform_main:thereIsMoreThanOneFleet(ifs_freeform_main.planetFleet[next]) then

                ifs_freeform_main.attackTeam = ifs_freeform_main.playerTeam

                -- set up the attacking and defending team. the attacker is the player team (current turn team) since it is moving to attack
                if ifs_freeform_main:getEnemyFleetToTeam(ifs_freeform_main.planetFleet[next], playerTeam) then
                    ifs_freeform_main.defendTeam = ifs_freeform_main:getEnemyFleetToTeam(ifs_freeform_main.planetFleet[next], playerTeam)
                elseif ifs_freeform_main.planetTeam[next] then
                    ifs_freeform_main.defendTeam = ifs_freeform_main.planetTeam[next]
                end

                -- jump to the battle screen
                ScriptCB_PushScreen("ifs_freeform_battle")
            else
                -- jump to the summary page
                ScriptCB_PushScreen("ifs_freeform_summary")
            end
        end
    else
        if start ~= next then
            ifs_freeform_main:DrawFleetIcon(next, playerTeam, true, true)
        end
    end

    -- call common update
    this:UpdateCommon(fDt)
end

---------------------------
--  end ifs_freeform_ai
---------------------------