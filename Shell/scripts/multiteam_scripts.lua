---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Ben.
--- DateTime: 11/18/2019 7:30 PM
---



--TODO update planetFleet references to new object
--and update 3 - team references to how they are in overrides.lua


---------------------------
--  begin global variables
---------------------------

--TODO make this dynamic dependent on teamCode table

-- purchased cards
-- (hack to remove unlocking)
ifs_purchase_tech_cards = {
    [1] = {
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true
    },
    [2] = {
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true
    },
    [3] = {
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true
    },
    [4] = {
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true
    }
}

-- using cards
ifs_purchase_tech_using = {
    [1] = { 0, 0, 0 },
    [2] = { 0, 0, 0 },
    [3] = { 0, 0, 0 },
    [4] = { 0, 0, 0 }
}

ifs_purchase_unit_owned = {
    [1] = { soldier = true, pilot = true },
    [2] = { soldier = true, pilot = true },
    [3] = { soldier = true, pilot = true },
    [4] = { soldier = true, pilot = true }
}

---------------------------
--  end global variables
---------------------------

---------------------------
--  begin ifs_freeform_main
---------------------------

-- fleet class we will use to represent a fleet and its attributes
-- this is a new class for this mod. not all of the fields are used yet
ifs_freeform_main.fleet = {
    id = 0,
    name = "placeholder",
    team = 1,
    movesLeft = 1,
    turnAge = 0,
    unit_owned = {
            soldier = true,
            pilot = true
            },
    reinforcements=200,
    makeNewFleet = function(self, newobject, team)
        -- create object if user does not provide one
        newobject = newobject or {}

        setmetatable(newobject, self)
        self.__index = self

        -- each new fleet object has an incremented ID
        self.id = self.id + 1
        newobject.id = self.id

        -- developer selects which team the fleet is
        newobject.team = team

        return newobject
    end,
    setReinforcements = function(self, reinforcements)
        self.reinforcements = reinforcements
        return self
    end
}

--check if the fleets at the planet contain the given team's fleet
ifs_freeform_main.fleetOnTeamIsPresent = function(this, fleetList, team)

    if fleetList == nil then
        return false
    end

    for fleetIndex, fleetObj in ipairs(fleetList) do
        if fleetObj.team == team then
            return true
        end
    end
    return false
end

--check if the fleets at the planet contain the given team's fleet
ifs_freeform_main.getEnemyFleetToTeam = function(this, fleetList, team)

    print("ifs_freeform_main.getEnemyFleetToTeam")

    if fleetList == nil then
        print("ERROR fleetList is nil")
        return nil
    end

    for fleetIndex, fleetObj in ipairs(fleetList) do
        if fleetObj.team ~= team then
            return fleetObj.team
        end
    end
    return nil
end

--check if the fleets at the planet contain the given team's fleet
ifs_freeform_main.thereIsMoreThanOneFleet = function(this, fleetList)
    print("ifs_freeform_main.thereIsMoreThanOneFleet")

    if fleetList == nil then
        return false
    end

    if table.getn(fleetList) > 1 then
        return true
    else
        return false
    end

end

--check if the fleets at the planet contain the given team's fleet and none other are there
ifs_freeform_main.fleetOnTeamIsOnlyPresent = function(this, fleetList, team)

    print("ifs_freeform_main.fleetOnTeamIsOnlyPresent")

    if fleetList == nil then
        print("ifs_freeform_main.fleetOnTeamIsOnlyPresent planet has no fleets")
        return false
    end

    if table.getn(fleetList) > 1 then
        return false
    end

    for fleetIndex, fleetObj in ipairs(fleetList) do
        if fleetObj.team == team then
            return true
        end
    end
    return false
end

ifs_freeform_main.Enter = function(this, bFwd)
    gIFShellScreenTemplate_fnEnter(this, bFwd)
    print("ifs_freeform_main.Enter")

    if bFwd then
        -- stop any playing movie
        ifelem_shellscreen_fnStopMovie()

        -- disable split screen
        this.wasSplit = ScriptCB_GetNumCameras()
        ScriptCB_SetSplitscreen(nil)

        -- enable metagame rules
        ScriptCB_SetGameRules("metagame")

        -- clear out saved screen
        this.curScreen = nil

        -- perform one-time init
        -- (does nothing if already loaded)
        this:OneTimeInit(true)

        ScriptCB_SetShellMusic("metagame_menu_music")

        -- set build screens to campaign mode
        ifs_freeform_purchase_unit:SetFreeformMode()
        ifs_freeform_purchase_tech:SetFreeformMode()

        -- if metagame state was saved...
        if ScriptCB_IsMetagameStateSaved() then
            -- set the active team
            this:SetActiveTeam(this.playerTeam)
        else
            -- set initial state
            this:Start()

            -- get selected planet and fleet for each side
            this.lastSelected = {}
            this.lastFleet = {}
            for planet, fleetList in pairs(this.planetFleet) do
                for fleetIndex, fleetObj in ipairs(fleetList) do
                    if this:thereIsMoreThanOneFleet(fleetList) then
                        this.lastSelected[fleetObj.team] = planet
                        this.lastFleet[fleetObj.team] = planet
                    end
                end
            end
            for team, planet in pairs(this.planetBase) do
                if not this.lastSelected[team] then
                    this.lastSelected[team] = planet
                end
            end

            -- set the active team to that of the starting controller
            this:SetActiveTeam(this.controllerTeam[this.startController])
            this.planetNext = this.lastSelected[this.playerTeam]

            -- clear state
            this.launchMission = nil
            this.activeBonus = {}
            this.recentPlanets = {}
        end

        -- if the last battle had a winner...
        local winner = ScriptCB_GetLastBattleVictory()
        local loser = 2

        if winner == 1 then
            winner = this.attackTeam
            loser = this.defendTeam
        elseif winner == 2 then
            winner = this.defendTeam
            loser = this.attackTeam
        else
            print("ERROR could not determine winner, is " .. tostring(winner))
        end

        if this.soakMode and ScriptCB_IsMetagameStateSaved() then
            winner = math.random(2)
        end
        if winner > 0 then
            -- apply battle results
            this:ApplyBattleResult(this.planetNext, winner, loser)

            -- clear battle result
            ScriptCB_SetLastBattleVictoryValid(false)

            -- go to the result screen
            ScriptCB_PushScreen("ifs_freeform_result")

            -- trigger save request on next turn
            this.requestSave = true

            -- if setting up sides...
        elseif this.setupSides then

            -- go to the side setup screen
            ScriptCB_PushScreen("ifs_freeform_sides")

            -- otherwise...
        else

            -- go to the saved screen
            if this.curScreen == "summary_result" then
                ScriptCB_PushScreen("ifs_freeform_result")
                ScriptCB_PushScreen("ifs_freeform_summary")
            elseif this.curScreen == "summary_fleet" then
                ScriptCB_PushScreen("ifs_freeform_fleet")
                ScriptCB_PushScreen("ifs_freeform_summary")
            elseif this.curScreen == "result" then
                ScriptCB_PushScreen("ifs_freeform_result")
            elseif this.curScreen == "battle_card_2" then
                ifs_freeform_battle_card.defending = 1
                ScriptCB_PushScreen("ifs_freeform_battle")
                ScriptCB_PushScreen("ifs_freeform_battle_mode")
                ScriptCB_PushScreen("ifs_freeform_battle_card")
            elseif this.curScreen == "battle_card_1" then
                ifs_freeform_battle_card.defending = nil
                ScriptCB_PushScreen("ifs_freeform_battle")
                ScriptCB_PushScreen("ifs_freeform_battle_mode")
                ScriptCB_PushScreen("ifs_freeform_battle_card")
            elseif this.curScreen == "battle_mode" then
                ScriptCB_PushScreen("ifs_freeform_battle")
                ScriptCB_PushScreen("ifs_freeform_battle_mode")
            elseif this.curScreen == "battle_back" then
                ScriptCB_PushScreen("ifs_freeform_fleet")
                ScriptCB_PushScreen("ifs_freeform_battle")
            elseif this.curScreen == "battle_noback" then
                ScriptCB_PushScreen("ifs_freeform_battle")
                -- if the team has a human player...
            elseif this.joystick then
                -- go to the fleet screen
                ScriptCB_PushScreen("ifs_freeform_fleet")
            else

                print("ifs_freeform_main.Enter going to AI move")
                -- go to ai move
                ScriptCB_PushScreen("ifs_freeform_ai")
            end

        end

        -- set up build screen
        ifs_purchase_build_screen()

        print("ifs_freeform_main.Enter initializing AI...")
        -- initialize ai state (HACK)
        ifs_freeform_ai:Init()

        --			-- create port entities (HACK)
        --			for planet, port in pairs(this.portPtr) do
        --				DeleteEntity(port)
        --			end
        --			this.portPtr = { }
        --			for planet, team in pairs(this.planetPort) do
        --				this.portPtr[planet] = CreateEntity(this.portClass[team], this.modelMatrix[planet][3])
        --			end

        -- create fleet entities (HACK)
        for team, list in pairs(this.fleetPtr) do
            for planet, fleet in pairs(list) do
                DeleteEntity(fleet)
            end
        end
        --TODO make this dynamic dependent on teamCode table
        print("ifs_freeform_main.Enter creating fleetPtr...")
        this.fleetPtr = { [1] = {}, [2] = {}, [3] = {}, [4] = {} }
        for planet, fleetList in pairs(this.planetFleet) do
            for fleetIndex, fleetObj in ipairs(fleetList) do
                    print("fleetObj.team is " .. tostring(fleetObj.team) .. " planet is " .. tostring(planet))
                    this.fleetPtr[fleetObj.team][planet] = CreateEntity(this.fleetClass[fleetObj.team], this.modelMatrix[planet][fleetObj.team])
            end
        end

        -- select the initial planet
        this:SelectPlanet(nil, this.planetNext)

        -- set camera offset for each zoom level
        SetMapCameraOffset(0, 0, 200, 480)
        SetMapCameraPitch(0, -0.05)
        SetMapCameraOffset(1, 0, 100, 150)
        SetMapCameraPitch(1, -0.025)

        -- enable the 3D scene
        ScriptCB_EnableScene(true)
    end
end

ifs_freeform_main.OneTimeInit = function(this, showLoadDisplay)
    print("ifs_freeform_main.OneTimeInit")
    -- restore any saved metagame state
    if ScriptCB_IsMetagameStateSaved() then
        this:LoadState()
    end


    if not this.planetDestination then

        -- set up memory pools (HACK)
        SetMemoryPoolSize("EntitySoundStream", 2)

        SetMemoryPoolSize("ParticleTransformer::PositionTr", 700)
        SetMemoryPoolSize("ParticleTransformer::SizeTransf", 751)
        SetMemoryPoolSize("ParticleTransformer::ColorTrans", 1176)

        SetMemoryPoolSize("ParticleEmitterObject", 16)
        SetMemoryPoolSize("ParticleEmitterInfoData", 128)
        SetMemoryPoolSize("ParticleEmitter", 128)

        -- show the load display
        if showLoadDisplay then
            -- stop any streaming
            ScriptCB_StopMovie()
            ScriptCB_CloseMovie()
            ScriptCB_SetShellMusic()

            -- do loading
            SetupTempHeap(2 * 1024 * 1024)
            ScriptCB_ShowLoadDisplay(true)
        end

        -- load sides
        ifs_purchase_load_data(this.teamCode[1], this.teamCode[2])

        -- read the galaxy map level
        ReadDataFile("gal\\gal1.lvl")

        -- read the galaxy map level
        ReadDataFile("sound\\gal.lvl;gal_vo")

        this.streamVoice = OpenAudioStream("sound\\gal.lvl",  "gal_vo_slow")
        this.streamMusic = OpenAudioStream("sound\\gal.lvl",  "gal_music")

        ScriptCB_PostLoadHack()

        -- hide the load display
        if showLoadDisplay then
            ScriptCB_ShowLoadDisplay(false)
            ClearTempHeap()
        end

        -- perform one-time setup
        this:Setup()

        -- create empty port array
        this.portPtr = { }

        -- create empty fleet array
        --TODO make this dynamic dependent on teamCode table
        this.fleetPtr = { [1] = {}, [2] = {}, [3] = {}, [4] = {} }

        -- create planet, fleet, and port matrices
        this.planetMatrix = {}
        this.modelMatrix = {}
        for planet, _ in pairs(this.planetDestination) do
            local planetMatrix = GetEntityMatrix(planet)
            --planetMatrix is where the fleet icon is over the planer
            this.planetMatrix[planet] = {}
            this.planetMatrix[planet][0] = planetMatrix
            this.planetMatrix[planet][1] = CreateMatrix(-2.25, 0.0, 1.0, 0.0, 10.0, 4.0, -8.0, planetMatrix)
            this.planetMatrix[planet][2] = CreateMatrix(2.25, 0.0, 1.0, 0.0, -10.0, 4.0, -8.0, planetMatrix)
            this.planetMatrix[planet][3] = CreateMatrix(0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 0.0, planetMatrix)
            this.planetMatrix[planet][4] = CreateMatrix(0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 0.0, planetMatrix)
            --modelMatrix is what the fleet icon looks like
            this.modelMatrix[planet] = {}
            this.modelMatrix[planet][1] = GetEntityMatrix(planet .. "_fleet1") or this.planetMatrix[planet][1]
            this.modelMatrix[planet][2] = GetEntityMatrix(planet .. "_fleet2") or this.planetMatrix[planet][2]
            this.modelMatrix[planet][3] = GetEntityMatrix(planet .. "_fleet3") or this.planetMatrix[planet][3]
            this.modelMatrix[planet][4] = GetEntityMatrix(planet .. "_fleet4") or this.planetMatrix[planet][4]
        end

        -- show side setup screen?
        this.setupSides = (this.custom ~= nil)

        -- initialize team colors
        this:InitTeamColor()
    end
end

-- create a fleet with the specified team on the specified planet
ifs_freeform_main.CreateFleet = function(this, team, planet)
    print("ifs_freeform_main.CreateFleet")
    -- add the fleet to the planet
    --if not this.planetFleet[planet] then
    --    this.planetFleet[planet] = team
    --elseif this.planetFleet[planet] == 3 - team then
    --    this.planetFleet[planet] = 0
    --end

    if not this.planetFleet[planet] then
        this.planetFleet[planet] = {}
    end

    table.insert(this.planetFleet[planet], this.fleet:makeNewFleet(nil, team))

    -- create a fleet entity
    if not this.fleetPtr[team][planet] then
        this.fleetPtr[team][planet] = CreateEntity(this.fleetClass[team], this.modelMatrix[planet][team])
    end

    -- update the last fleet
    this.lastFleet[team] = planet
end

-- destroy a fleet with the specified team on the specified planet
ifs_freeform_main.DestroyFleet = function(this, team, planet)
    print("ifs_freeform_main.DestroyFleet")
    -- remove the fleet from the planet
    --if this.planetFleet[planet] == 0 then
    --    this.planetFleet[planet] = 3 - team
    --elseif this.planetFleet[planet] == team then
    --    this.planetFleet[planet] = nil
    --end

    --removes all fleets from planet that match team. can update it to delete by fleet id
    for fleetIndex, fleetObj in ipairs(this.planetFleet[planet]) do
        if fleetObj.team == team then
            this.planetFleet[planet][fleetIndex] = nil
        end
    end

    if this.fleetPtr[team][planet] then
        DeleteEntity(this.fleetPtr[team][planet])
        this.fleetPtr[team][planet] = nil
    end
end

-- move a fleet with the specified planet from the start planet to the next planet
ifs_freeform_main.MoveFleet = function(this, team, start, next)
    print("ifs_freeform_main.MoveFleet " .. tostring(team) .. " " .. tostring(start) .. " " .. tostring(next))

    -- save the fleet objects
    -- fleetPtr is the fleet icon, myFleet is the fleet object that holds gameplay info
    local fleetPtr = this.fleetPtr[team][start]
    local myFleet = nil

    print("about to remove fleet object from begin planet")
    --removes all fleets from planet that match team. can update it to delete by fleet id
    for fleetIndex, fleetObj in ipairs(this.planetFleet[start]) do
        print("fleet index is " .. tostring(fleetIndex))
        print("fleet object is " .. tostring(fleetObj))
        if fleetObj.team == team then
            myFleet = this.planetFleet[start][fleetIndex]
            this.planetFleet[start][fleetIndex] = nil
        end
    end
    print("after remove fleet object from begin planet")

    -- remove the fleet from the start planet
    this.fleetPtr[team][start] = nil

    --if this.planetFleet[start] == 0 then
    --    this.planetFleet[start] = 3 - team
    --elseif this.planetFleet[start] == team then
    --    this.planetFleet[start] = nil
    --end



    -- update the fleet's position
    SetEntityMatrix(fleetPtr, this.modelMatrix[next][team])

    -- add the fleet to the next planet
    this.fleetPtr[team][next] = fleetPtr

    --if not this.planetFleet[next] then
    --    this.planetFleet[next] = team
    --elseif this.planetFleet[next] == 3 - team then
    --    this.planetFleet[next] = 0
    --end

    print("about to insert fleet myfleet " .. tostring(myFleet))
    if not this.planetFleet[next] then
        this.planetFleet[next] = {}
    end
    table.insert(this.planetFleet[next], myFleet)


    -- update the last fleet
    this.lastFleet[team] = next
end

-- set the active team
ifs_freeform_main.SetActiveTeam = function(this, team)
    print("ifs_freeform_main.SetActiveTeam")
    this.playerTeam = team
    this.playerSide = this.teamCode[team]
    this.joystick = this.teamController[team]
    --TODO figure out how to set joystick_other
    this.joystick_other = this.teamController[3 - team]
    print(">>>>>>>>>>>>>>>>>>>>> joystick_other is " .. tostring(joystick_other))
    ScriptCB_SetHotController((this.joystick or this.joystick_other or 0)+1)

    print("about to go to SetActiveSide")
    -- update dependent values
    ifs_freeform_purchase_unit:SetActiveSide()
end

-- save mission setup. Will send info to the mission about units, team, etc
ifs_freeform_main.SaveMissionSetup = function(this)
    print("ifs_freeform_main.SaveMissionSetup")
    -- create mission setup table
    local missionSetup = {}

    -- add team units
    local teamUnits = {}
    for team, code in ifs_freeform_main.teamCode do
        teamUnits[code] = ifs_purchase_unit_owned[team]
    end
    missionSetup.units = teamUnits

    -- add current world
    local selected = ifs_freeform_main.planetSelected
    missionSetup.world = ifs_freeform_main.planetTeam[selected] and selected or "spa"

    -- store mission setup table
    ScriptCB_SaveMissionSetup(missionSetup)

    -- set forced teams
    for controller, team in pairs(ifs_freeform_main.controllerTeam) do
        ScriptCB_MetagameSetSide(ifs_freeform_main.controllerPlayer[controller], ifs_freeform_main.teamCode[team])
    end

    -- Reset difficulty to what's in profile
    ScriptCB_SetDifficulty(ScriptCB_GetDifficulty())
end

-- apply battle results for the specified planet
ifs_freeform_main.ApplyBattleResult = function(this, planet, winner, loser)
    print("ifs_freeform_main.ApplyBattleResult")
    -- save which team won
    this.winnerTeam = winner

    -- save whether the battle was a fleet battle
    this.fleetBattle = this:thereIsMoreThanOneFleet(this.planetFleet[planet])

    -- create if necessary
    this.planetResources = this.planetResources or {}
    this.battleResources = this.battleResources or {}

    -- no planet resources yet
    this.planetResources[winner] = 0
    this.planetResources[loser] = 0

    -- if the battle was a fleet battle...
    if this.fleetBattle then
        -- give winner and loser some resources
        this.battleResources[winner] = this.spaceValue.victory
        this.battleResources[loser] = this.spaceValue.defeat
    else
        -- if the planet is the loser's base, remove it from play
        -- otherwise, assign it to the winner
        this.planetTeam[planet] = planet == this.planetBase[loser] and 0 or winner

        -- give winner and loser planet resources
        this.battleResources[winner] = this.planetValue[planet].victory
        this.battleResources[loser] = this.planetValue[planet].defeat

        -- add per-turn resource units per planet
        for planet, team in pairs(this.planetTeam) do
            if team ~= 0 then
                this.planetResources[team] = this.planetResources[team] + this.planetValue[planet].turn
            end
        end
    end

    -- give each team its added resources
    this:AddResources(winner, this.battleResources[winner] + this.planetResources[winner])
    this:AddResources(loser, this.battleResources[loser] + this.planetResources[loser])

    -- remove the loser's fleet, if any
    if this.fleetBattle or checkLoser() then
        AttachEffectToMatrix(CreateEffect(this.fleetExplosion[loser]), this.modelMatrix[planet][loser])
    end
    this:DestroyFleet(loser, planet)

    -- add the planet to the battle list (for AI)
    this.recentPlanets = this.recentPlanets or {}
    if this.planetTeam[planet] and this.planetTeam[planet] > 0 then
        this.recentPlanets[3] = nil
        table.insert(this.recentPlanets, 1, planet)
    end
end

-- go to the next turn
ifs_freeform_main.NextTurn = function(this)
    print("ifs_freeform_main.NextTurn")
    -- clear the screen stack
    ScriptCB_PopScreen("ifs_freeform_main")

    -- update metagame victory result
    if this.CheckVictory then
        this.teamVictory = this:CheckVictory()
    end

    -- on victory...
    if this.teamVictory then
        -- go to the end screen
        ScriptCB_PushScreen("ifs_freeform_end")
    else
        -- advance to the next turn
        this.turnNumber = this.turnNumber + 1

        local nextTeam = this.playerTeam
        for teamNumber, teamString in ipairs(this.teamCode) do
            print("team number is " .. teamNumber)
            if teamNumber == this.playerTeam then
                -- if there is another team after this one select that team
                if this.teamCode[ teamNumber + 1 ] then
                    nextTeam = teamNumber + 1
                    print("selected for next team:" .. tostring(this.teamCode[teamNumber + 1]))
                else
                    -- else start at beginning team
                    nextTeam = 1 -- arrays start at 1
                    print("selected for next team:" .. tostring(this.teamCode[1]))
                end
            else
                -- do nothing, keep iterating
            end
        end

        -- switch teams
        this.lastSelected[this.playerTeam] = this.planetNext
        this:SetActiveTeam(nextTeam)
        this:SelectPlanet(nil, this.lastSelected[this.playerTeam])

        -- clear state
        this.launchMission = nil
        this.activeBonus = {}

        -- if the team has a human player...
        if this.joystick then
            -- go to the fleet screen
            ScriptCB_PushScreen("ifs_freeform_fleet")
        else

            print("ifs_freeform_main.NextTurn going to AI move")
            -- go to ai move
            ScriptCB_PushScreen("ifs_freeform_ai")
        end
    end
end

-- set up team colors
ifs_freeform_main.InitTeamColor = function(this)
    print("ifs_freeform_main.InitTeamColor")
    -- precomputed colors
    local colorWhite = { r=255, g=255, b=255 }
    local colorBlue = { r=32, g=96, b=255 }
    local colorRed = { r=255, g=32, b=32 }
    local colorGreen = { r=0, g=255, b=0 }
    local colorOrange = { r=255, g=150, b=0 }

    ---- if AI versus team 2...
    --this.teamColor = {}
    --if not this.teamController[1] and this.teamController[2] then
    --    -- swapped colors: 1=red, 2=blue
    --    this.teamColor[1] = { [0] = colorWhite, [1] = colorRed, [2] = colorBlue }
    --    this.teamColor[2] = { [0] = colorWhite, [1] = colorRed, [2] = colorBlue }
    --else
    --    -- absolute colors: 1=blue, 2=red
    --    this.teamColor[1] = { [0] = colorWhite, [1] = colorBlue, [2] = colorRed }
    --    this.teamColor[2] = { [0] = colorWhite, [1] = colorBlue, [2] = colorRed }
    --end

    this.teamColor = {}
    --TODO make this dynamic dependent on teamCode table
    this.teamColor[1] = { [0] = colorWhite, [1] = colorBlue, [2] = colorOrange, [3] = colorGreen, [4] = colorRed }
    this.teamColor[2] = { [0] = colorWhite, [1] = colorBlue, [2] = colorOrange, [3] = colorGreen, [4] = colorRed }
    this.teamColor[3] = { [0] = colorWhite, [1] = colorBlue, [2] = colorOrange, [3] = colorGreen, [4] = colorRed }
    this.teamColor[4] = { [0] = colorWhite, [1] = colorBlue, [2] = colorOrange, [3] = colorGreen, [4] = colorRed }
end

-- get the next planet based on player input
ifs_freeform_main.UpdateNextPlanet = function(this)
    print("ifs_freeform_main.UpdateNextPlanet")
    if not this.joystick then
        return
    end

    -- get the left joystick value
    local x, y = ScriptCB_ReadLeftstick(this.joystick)

    -- get the joystick magnitude
    local magnitude = x * x + y * y

    -- if controller move was registered
    if this.movePressed then
        -- if released...
        if magnitude < 0.01 then
            -- clear moved
            this.movePressed = nil
        end
    else
        -- if pushed sufficiently...
        if magnitude > 0.4096 then
            -- register moved
            this.movePressed = true

            -- normalize the direction
            local scale = math.sqrt(magnitude)
            x = x / scale
            y = -y / scale

            -- get the starting planet's screen position
            local x0, y0 = GetScreenPosition(this.planetSelected)

            -- for each planet...
            local bestscore = 0
            for index, planet in ipairs(this.planetDestination[this.planetSelected]) do
                -- if no fleet is selected, or the destination does not have a friendly fleet...
                if not this.fleetSelected or not this:fleetOnTeamIsOnlyPresent(this.planetFleet[planet], this.playerTeam) then
                    -- get the planet's screen position
                    local x1, y1 = GetScreenPosition(planet)

                    -- get the normalized direction
                    local dx = x1 - x0
                    local dy = y1 - y0
                    local scale = math.sqrt(dx * dx + dy * dy)
                    dx = dx / scale
                    dy = dy / scale

                    -- get the direction score
                    local score = x * dx + y * dy

                    -- update the best planet
                    if bestscore < score then
                        bestscore = score
                        this.planetNext = planet
                    end
                end
            end
        end
    end
end

ifs_freeform_main.SetVictoryPlanetLimit = function(this, limit)
    print("SetVictoryPlanetLimit", limit)
    this.CheckVictory = function(this)
        print("CheckVictoryPlanetLimit", limit)
        local checkfleets = false
        if not limit then
            limit = 0
            for planet, team in pairs(this.planetTeam) do
                if team > 0 then
                    limit = limit + 1
                end
            end
            checkfleets = true
        end
        --TODO make this dynamic dependent on teamCode table
        local counts = { [1] = 0, [2] = 0, [3] = 0, [4] = 0 }
        for planet, team in pairs(this.planetTeam) do
            if team > 0 then
                counts[team] = counts[team] + 1
                if counts[team] >= limit then
                    if checkfleets then
                        -- return nil if there is any enemy fleet
                        for planet, fleetList in pairs(this.planetFleet) do
                            for fleetIndex, fleetObj in ipairs(fleetList) do
                                if fleetObj.team ~= team then
                                    return nil
                                end
                            end
                        end
                    end
                    return team
                end
            end
        end
        return nil
    end
end

-- save metagame state
ifs_freeform_main.SaveState = function(this)
    print("ifs_freeform_main.SaveState")
    -- what's the current screen?
    if ScriptCB_IsScreenInStack("ifs_freeform_summary") then
        if ScriptCB_IsScreenInStack("ifs_freeform_result") then
            this.curScreen = "summary_result"
        else
            this.curScreen = "summary_fleet"
        end
    elseif ScriptCB_IsScreenInStack("ifs_freeform_result") then
        this.curScreen = "result"
    elseif ScriptCB_IsScreenInStack("ifs_freeform_battle_card") then
        if ifs_freeform_battle_card.defending then
            this.curScreen = "battle_card_2"
        else
            this.curScreen = "battle_card_1"
        end
    elseif ScriptCB_IsScreenInStack("ifs_freeform_battle_mode") then
        this.curScreen = "battle_mode"
    elseif ScriptCB_IsScreenInStack("ifs_freeform_battle") then
        if ScriptCB_IsScreenInStack("ifs_freeform_fleet") then
            this.curScreen = "battle_back"
        else
            this.curScreen = "battle_noback"
        end
    else
        this.curScreen = nil
    end

    -- map name to team as a hint
    local profileTeam = {}
    for joystick, team in pairs(this.controllerTeam) do
        local name = ScriptCB_ununicode(ScriptCB_GetProfileName(joystick+1))
        profileTeam[name] = team
    end

    -- save values to saved state
    ScriptCB_SaveMetagameState(
            this.custom,
            this.scenario,
            profileTeam,		--this.controllerTeam,
            this.lastSelected,
            this.lastFleet,
            this.planetTeam,
    --			this.planetPort,
            this.planetFleet,
            this.planetNext,
            this.teamResources,
            ifs_purchase_unit_owned,
            ifs_purchase_tech_cards,
            ifs_purchase_tech_using,
            this.playerTeam,
            this.attackTeam,
            this.defendTeam,
            this.turnNumber,
            this.curScreen,
            ifs_freeform_fleet.turnNumber,
            ifs_freeform_fleet.planetStart,
            ifs_freeform_fleet.planetNext,
            this.launchMission,
            this.activeBonus,
            this.winnerTeam,
            this.fleetBattle,
            this.recentPlanets,
            this.planetResources,
            this.battleResources,
            this.soakMode
    )
end

-- load metagame state
ifs_freeform_main.LoadState = function(this)
    print("ifs_freeform_main.LoadState")
    local profileTeam
    local screen

    -- load values from saved state
    this.custom,
    this.scenario,
    profileTeam,		--this.controllerTeam,
    this.lastSelected,
    this.lastFleet,
    this.planetTeam,
    --		this.planetPort,
    this.planetFleet,
    this.planetNext,
    this.teamResources,
    ifs_purchase_unit_owned,
    ifs_purchase_tech_cards,
    ifs_purchase_tech_using,
    this.playerTeam,
    this.turnNumber,
    this.curScreen,
    ifs_freeform_fleet.turnNumber,
    ifs_freeform_fleet.planetStart,
    ifs_freeform_fleet.planetNext,
    this.launchMission,
    this.activeBonus,
    this.winnerTeam,
    this.fleetBattle,
    this.recentPlanets,
    this.planetResources,
    this.battleResources,
    this.soakMode
    = ScriptCB_LoadMetagameState()

    -- create a blank list if empty
    this.recentPlanets = this.recentPlanets or {}

    -- if loading a mission... (HACK)
    if ScriptCB_GetLastBattleVictory() < 0 then
        -- set mission name
        if this.launchMission then
            ScriptCB_SetMissionNames(this.launchMission, nil)
        end

        -- activate team bonuses
        for team, bonus in pairs(this.activeBonus) do
            ActivateBonus(team, bonus)
        end
    end

    -- start appropriate scenario
    local start = _G["ifs_freeform_start_" .. this.scenario]
    if start then
        start(this, this.custom)
    else
        assert("undefined scenario type \""..this.scenario.."\"")
    end

    -- discard the unused start function
    this.Start = nil

    -- restore profile teams
    local controllerTeam = {}
    for joystick, team in pairs(this.controllerTeam) do
        local name = ScriptCB_ununicode(ScriptCB_GetProfileName(joystick+1))
        local newteam = profileTeam[name]
        print (joystick, team, newteam, name)
        controllerTeam[joystick] = newteam or team
    end
    ifs_freeform_controllers(this, controllerTeam)
end

------------------------
-- end ifs_freeform_main
------------------------

---------------------------
--  begin ifs_freeform_fleet
---------------------------

ifs_freeform_fleet.Enter = function(this, bFwd)
    print("ifs_freeform_fleet.Enter")
    gIFShellScreenTemplate_fnEnter(this, bFwd)

    ifs_freeform_main:PlayVoice(string.format(ifs_fleet_entry_sound, ifs_freeform_main.playerSide))

    -- get the active team
    local team = ifs_freeform_main.playerTeam

    -- if backing into this page after a fleet move...
    local didUndo = false
    if not bFwd then
        -- reverse the fleet's move
        didUndo = this:AttemptUndo(team)
    elseif not this.turnNumber or this.turnNumber ~= ifs_freeform_main.turnNumber then
        this.fleetSelected = nil
        this.turnNumber = nil
        this.planetStart = nil
        this.planetNext = nil
    end

    IFText_fnSetString(this.title.text, "ifs.freeform.navigation.move")

    if bFwd or didUndo then
        -- pick a fleet if none set
        if not ifs_freeform_main.lastFleet[team] then
            -- if the selected planet has a fleet...
            local selected = ifs_freeform_main.planetSelected
            if selected and ifs_freeform_main:fleetOnTeamIsOnlyPresent(ifs_freeform_main.planetFleet[selected], team) then
                -- use the fleet on the selected planet
                ifs_freeform_main.lastFleet[team] = selected
            else
                -- pick another fleet
                for planet, fleet in pairs(ifs_freeform_main.fleetPtr[team]) do
                    ifs_freeform_main.lastFleet[team] = planet
                    break
                end
            end
        end

        -- select the last-used fleet
        this:SelectFleet(team, ifs_freeform_main.lastFleet[team])
    elseif not this.fleetSelected then
        -- re-center on selected planet
        ifs_freeform_main.planetNext = ifs_freeform_main.planetSelected
    end

    IFObj_fnSetVis(this.info.caption, 1)
    IFText_fnSetString(this.info.caption, "ifs.freeform.purchase.navy.fleetname")

    -- update tabs
    if (gPlatformStr == "PC") then
        ifelem_tabmanager_SelectTabGroup(this, true)
        ifelem_tabmanager_SetSelected(this, ifs_freeform_tab_layout, "_tab_fleet")
        ifelem_tabmanager_SetDimmed(this, ifs_freeform_tab_layout, "_tab_bonus", not ifs_freeform_purchase_tech:CanEnter())
        ifelem_tabmanager_SetDimmed(this, ifs_freeform_tab_layout, "_tab_units", not ifs_freeform_purchase_unit:CanEnter())
    else
        IFText_fnSetString(this.tableft.text, "ifs.freeform.navigation.bonus")
        IFObj_fnSetVis(this.tableft, ifs_freeform_purchase_tech:CanEnter() and 1 or nil)
        IFText_fnSetString(this.tabright.text, "ifs.freeform.navigation.units")
        IFObj_fnSetVis(this.tabright, ifs_freeform_purchase_unit:CanEnter() and 1 or nil)
    end

    ifs_freeform_main:UpdatePlayerText(this.player)

    this:UpdateFleetCost()
    this:UpdateAction()

    -- default to mid-zoom
    this.zoomLevel = 1

    if (gPlatformStr == "PC") then
        -- no scroll yet
        this.scrollX = 0
        this.scrollZ = 0

        -- establish boundary
        this.scrollMinX = 0
        this.scrollMinZ = 0
        this.scrollMaxX = 0
        this.scrollMaxZ = 0
        for planet, _ in pairs(ifs_freeform_main.planetDestination) do
            local x, y, z = GetWorldPosition(planet)
            if this.scrollMinX > x then this.scrollMinX = x end
            if this.scrollMaxX < x then this.scrollMaxX = x end
            if this.scrollMinZ > z then this.scrollMinZ = z end
            if this.scrollMaxZ < z then this.scrollMaxZ = z end
        end
    end

    -- set the camera zoom
    ifs_freeform_main:SetZoom(this.zoomLevel)

    -- prompt for save if necessary
    ifs_freeform_main:PromptSave()

    -- clear mouse state
    this.lastDoubleClickTime = nil
    this.bDoubleClicked = nil
end

ifs_freeform_fleet.UpdateAction = function(this)
    print("ifs_freeform_fleet.UpdateAction")
    local team = ifs_freeform_main.playerTeam
    local selected = ifs_freeform_main.planetSelected
    local next = ifs_freeform_main.planetNext

    this.buildFleet = nil

    -- get planet info
    ifs_freeform_main:UpdatePlanetInfo(this.info)

    -- if there is a selected fleet...
    if this.fleetSelected then
        -- if the fleet is moving...
        if ifs_freeform_main.planetNext ~= ifs_freeform_main.planetSelected then
            ifs_freeform_SetButtonVis(this, "accept", 1)
            ifs_freeform_SetButtonName(this, "accept", "ifs.freeform.fleet.move")
        else
            ifs_freeform_SetButtonVis(this, "accept", nil)
        end

        ifs_freeform_SetButtonVis(this, "back", 1)
        ifs_freeform_SetButtonName(this, "back", "ifs.freeform.fleet.deselect" )

        if ifs_freeform_main.planetTeam[next] then
            IFObj_fnSetVis(this.info, true)
            IFObj_fnSetVis(this.info.caption, true)
            IFText_fnSetString(this.info.caption, "planetname." .. next)
            IFObj_fnSetColor(this.info.caption, ifs_freeform_main:GetTeamColor(ifs_freeform_main.planetTeam[next]))
            IFObj_fnSetAlpha(this.info.caption, gTitleTextAlpha)
        else
            IFObj_fnSetVis(this.info, false)
            IFObj_fnSetVis(this.info.caption, false)
        end

        IFObj_fnSetVis(this.info.subcaption, nil)
    else
        -- if the planet has a friendly fleet...
        if ifs_freeform_main:fleetOnTeamIsOnlyPresent(ifs_freeform_main.planetFleet[selected], team) then
            ifs_freeform_SetButtonVis(this, "accept", 1)
            if ifs_freeform_main.planetTeam[selected] then
                IFObj_fnSetVis(this.info, true)
                IFObj_fnSetVis(this.info.caption, true)
                IFObj_fnSetVis(this.info.subcaption, false)
                IFObj_fnSetColor(this.info.caption, ifs_freeform_main:GetTeamColor(ifs_freeform_main.planetTeam[selected]))
                IFObj_fnSetAlpha(this.info.caption, gTitleTextAlpha)
                IFText_fnSetString(this.info.caption, "planetname." .. selected)
            else
                IFObj_fnSetVis(this.info, false)
                IFObj_fnSetVis(this.info.caption, false)
                IFObj_fnSetVis(this.info.subcaption, false)
            end
            ifs_freeform_SetButtonName(this, "accept", "ifs.freeform.fleet.select")
            -- if this is a valid build location...
        elseif this:IsValidBuild(team, selected) then
            -- build a fleet
            IFObj_fnSetVis(this.info, true)
            IFObj_fnSetVis(this.info.caption, true)
            IFObj_fnSetVis(this.info.subcaption, true)
            ifs_freeform_SetButtonVis(this, "accept", 1)

            IFText_fnSetUString(this.info.caption,
                    ScriptCB_usprintf("ifs.freeform.fleet.build",
                            ScriptCB_getlocalizestr("planetname." .. selected)
                    )
            )
            IFText_fnSetUString(this.info.subcaption,
                    ScriptCB_usprintf("ifs.freeform.credits", ScriptCB_tounicode(this.fleetCost))
            )

            IFText_fnSetString(this.info.text, "ifs.freeform.fleet.desc")

            ifs_freeform_SetButtonName(this, "accept", "ifs.freeform.purchase.navy.fleet")

            local enough = ifs_freeform_main:EnoughResources(team, this.fleetCost)
            local r, g, b = ifs_freeform_main:GetCreditsColor(enough)
            local a = gTitleTextAlpha
            local accept_a = enough and 1.0 or 0.3
            IFObj_fnSetColor(this.info.caption, r, g, b)
            IFObj_fnSetAlpha(this.info.caption, a)
            IFObj_fnSetColor(this.info.subcaption, r, g, b)
            IFObj_fnSetAlpha(this.info.subcaption, a)
            IFObj_fnSetAlpha(this.action.accept, accept_a)
            this.buildFleet = enough
        else
            -- cannot build here
            ifs_freeform_SetButtonVis(this, "accept", nil)
            if ifs_freeform_main.planetTeam[selected] then
                IFObj_fnSetVis(this.info, true)
                IFObj_fnSetVis(this.info.caption, true)
                IFObj_fnSetColor(this.info.caption, ifs_freeform_main:GetTeamColor(ifs_freeform_main.planetTeam[selected]))
                IFObj_fnSetAlpha(this.info.caption, gTitleTextAlpha)
                IFText_fnSetString(this.info.caption, "planetname." .. selected)
            else
                IFObj_fnSetVis(this.info, false)
                IFObj_fnSetVis(this.info.caption, false)
            end
            IFObj_fnSetVis(this.info.subcaption, false)
        end

        ifs_freeform_SetButtonVis(this, "back", nil)
    end

    ifs_freeform_SetButtonName(this, "misc", "ifs.freeform.skip")
end

ifs_freeform_fleet.GetSuggestedMove = function(this, team, planet)
    print("ifs_freeform_fleet.GetSuggestedMove")
    -- use the AI to calculate weights
    ifs_freeform_ai:CalculateWeights(team)

    -- get weighted move values
    local moveWeight = {}
    local totalWeight = 0
    local reference = ifs_freeform_ai.planetValue[planet]
    for _, destination in ipairs(ifs_freeform_main.planetDestination[planet]) do
        if not ifs_freeform_main:fleetOnTeamIsOnlyPresent(ifs_freeform_main.planetFleet[destination], team) then
            local weight = math.pow(2, ifs_freeform_ai.planetValue[destination] - reference)
            moveWeight[destination] = weight
            totalWeight = totalWeight + weight
        end
    end

    -- get a random move
    local randomWeight = math.random() * totalWeight

    -- for each possible move...
    for move, weight in pairs(moveWeight) do
        -- deduct the move's weight
        randomWeight = randomWeight - weight

        -- if this move is the selected one...
        if randomWeight <= 0 then
            -- return the destination
            return move
        end
    end

    -- no move (wah!)
    return planet
end

-- calculate fleet cost
ifs_freeform_fleet.UpdateFleetCost = function(this)
    print("ifs_freeform_fleet.UpdateFleetCost")
    -- count fleets
    local fleets = 0
    for planet, fleetList in pairs(ifs_freeform_main.planetFleet) do
        for fleetIndex, fleetObj in ipairs(fleetList) do
            if fleetObj.team == ifs_freeform_main.playerTeam then
                fleets = fleets + 1
            end

        end
    end
    this.fleetCost = ifs_freeform_fleet_cost[fleets]
end

ifs_freeform_fleet.SelectFleet = function(this, team, planet)
    print("ifs_freeform_fleet.SelectFleet")
    -- if the planet has a friendly fleet...
    if ifs_freeform_main:fleetOnTeamIsOnlyPresent(ifs_freeform_main.planetFleet[planet], team) then
        -- select the fleet
        this.fleetSelected = planet
        ifs_freeform_main.lastFleet[team] = planet
        -- pick a default destination using AI code
        ifs_freeform_main:SelectPlanet(this.info, planet)
        ifs_freeform_main.planetNext = this:GetSuggestedMove(team, planet)
        return true
    end
    return false
end

ifs_freeform_fleet.IsValidMove = function(this, team, start, next)
    print("ifs_freeform_fleet.IsValidMove")
    -- check if the next location is valid...
    local valid = false
    for _, destination in ipairs(ifs_freeform_main.planetDestination[start]) do
        if next == destination then
            valid = true
            break
        end
    end
    if not valid then
        return false
    end

    -- check if the next location is blocked
    if ifs_freeform_main:fleetOnTeamIsOnlyPresent(ifs_freeform_main.planetFleet[next], team) then
        return false
    end

    -- the move is valid
    return true
end

ifs_freeform_fleet.AttemptMove = function(this, team, start, next)
    print("ifs_freeform_fleet.AttemptMove")
    -- fail invalid move
    if not this:IsValidMove(team, start, next) then
        return false
    end

    -- move the fleet
    ifs_freeform_main:MoveFleet(team, start, next)

    -- select the planet
    ifs_freeform_main:SelectPlanet(this.info, next)

    -- save the fleet's move
    this.turnNumber = ifs_freeform_main.turnNumber
    this.planetStart = start
    this.planetNext = next

    -- if the destination planet is an enemy, or there is a fleet battle...
    if ifs_freeform_main.planetTeam[next] ~= team
            and ifs_freeform_main.planetTeam[next] ~= 0
            and ifs_freeform_main.planetTeam[next] ~= nil
            or
            ifs_freeform_main:thereIsMoreThanOneFleet(ifs_freeform_main.planetFleet[next]) then


        -- set up the attacking and defending team. the attacker is the player team (current turn team) since it is moving to attack
        ifs_freeform_main.attackTeam = ifs_freeform_main.playerTeam

        if ifs_freeform_main:getEnemyFleetToTeam(ifs_freeform_main.planetFleet[next], team) then
            ifs_freeform_main.defendTeam = ifs_freeform_main:getEnemyFleetToTeam(ifs_freeform_main.planetFleet[next], team)
        elseif ifs_freeform_main.planetTeam[next] then
            ifs_freeform_main.defendTeam = ifs_freeform_main.planetTeam[next]
        end

        -- jump to the battle screen
        this.nextScreen = "ifs_freeform_battle"
    else
        -- go to the summary page
        this.nextScreen = "ifs_freeform_summary"
    end

    -- start the display timer timer
    this.displayTimer = 1.0

    -- deselect the fleet
    this:DeselectFleet()

    return true
end

---------------------------
--  end ifs_freeform_fleet
---------------------------

---------------------------
--  begin ifs_freeform_purchase_fleet
---------------------------

-- calculate fleet cost
ifs_freeform_purchase_fleet.UpdateFleetCost = function(this)
    print("ifs_freeform_purchase_fleet.UpdateFleetCost")
    -- count fleets
    local fleets = 0
    for planet, fleetList in pairs(ifs_freeform_main.planetFleet) do
        for fleetIndex, fleetObj in ipairs(fleetList) do
            if fleetObj.team == ifs_freeform_main.playerTeam then
                fleets = fleets + 1
            end

        end
    end
    this.fleetCost = ifs_freeform_fleet_cost[fleets]
end

ifs_freeform_purchase_fleet.UpdateAction = function(this)
    print("ifs_freeform_purchase_fleet.UpdateAction")
    local team = ifs_freeform_main.playerTeam
    local selected = ifs_freeform_main.planetSelected

    this.buildPort = nil
    this.buildFleet = nil

    -- if the planet is not friendly...
    if ifs_freeform_main.planetTeam[selected] ~= team then
        -- no action
        ifs_freeform_SetButtonName(this, "accept", "ifs.freeform.purchase.navy.build")
        IFObj_fnSetAlpha(this.action.accept, 0.5)
        IFText_fnSetString(this.info.caption, "ifs.freeform.purchase.navy.nobuild")
        IFObj_fnSetColor(this.info.caption, 255, 255, 255)
        IFObj_fnSetVis(this.info.subcaption, nil)
        -- else if the planet has no port...
    elseif ifs_freeform_main.planetPort[selected] ~= team then
        -- build a port
        IFText_fnSetString(this.info.caption, "ifs.freeform.purchase.navy.portname")
        IFObj_fnSetVis(this.info.subcaption, 1)

        IFText_fnSetUString(this.info.subcaption,
                ScriptCB_usprintf("ifs.freeform.credits", ScriptCB_tounicode(this.portCost))
        )

        ifs_freeform_SetButtonName(this, "accept", "ifs.freeform.purchase.navy.port")

        if ifs_freeform_main:EnoughResources(team, this.portCost) then
            IFObj_fnSetAlpha(this.action.accept, 1.0)
            IFObj_fnSetColor(this.info.caption, 255, 255, 32)
            IFObj_fnSetColor(this.info.subcaption, 255, 255, 32)
            this.buildPort = true
        else
            IFObj_fnSetAlpha(this.action.accept, 0.5)
            IFObj_fnSetColor(this.info.caption, 255, 32, 32)
            IFObj_fnSetColor(this.info.subcaption, 255, 32, 32)
        end
        -- else if the planet has no fleet...
    elseif not ifs_freeform_main:fleetOnTeamIsOnlyPresent(ifs_freeform_main.planetFleet[selected], team) then
        -- build a fleet
        IFText_fnSetString(this.info.caption, "ifs.freeform.purchase.navy.fleetname")
        IFObj_fnSetVis(this.info.subcaption, 1)

        IFText_fnSetUString(this.info.subcaption,
                ScriptCB_usprintf("ifs.freeform.credits", ScriptCB_tounicode(this.fleetCost))
        )

        ifs_freeform_SetButtonName(this, "accept", "ifs.freeform.purchase.navy.fleet")

        if ifs_freeform_main:EnoughResources(team, this.fleetCost) then
            IFObj_fnSetAlpha(this.action.accept, 1.0)
            IFObj_fnSetColor(this.info.caption, 255, 255, 32)
            IFObj_fnSetColor(this.info.subcaption, 255, 255, 32)
            this.buildFleet = true
        else
            IFObj_fnSetAlpha(this.action.accept, 0.5)
            IFObj_fnSetColor(this.info.caption, 255, 32, 32)
            IFObj_fnSetColor(this.info.subcaption, 255, 32, 32)
        end
    else
        -- no action
        ifs_freeform_SetButtonName(this, "accept", "ifs.freeform.purchase.navy.build")

        IFObj_fnSetAlpha(this.action.accept, 0.5)
        IFText_fnSetString(this.info.caption, "ifs.freeform.purchase.navy.nobuild")
        IFObj_fnSetColor(this.info.caption, 255, 255, 255)

    end

    ifs_freeform_SetButtonName(this, "back", "common.back")
    ifs_freeform_SetButtonName(this, "misc", "ifs.freeform.endturn")
end

ifs_freeform_purchase_fleet.Input_Accept = function(this, joystick)
    print("ifs_freeform_purchase_fleet.Input_Accept")
    if(gPlatformStr == "PC") then
        --print( "this.CurButton = ", this.CurButton )
        if( this.CurButton == "_accept" ) then
            -- purchase the item
        elseif( this.CurButton == "_back" ) then
            -- handle in Input_Back
        elseif( this.CurButton == "_next" ) then
            -- go to end
            ScriptCB_PushScreen("ifs_freeform_summary")
        else
            -- check double click
            if( this.lastDoubleClickTime and ScriptCB_GetMissionTime()<this.lastDoubleClickTime+0.4 ) then
                this.bDoubleClicked = 1
            else
                this.lastDoubleClickTime = ScriptCB_GetMissionTime()
            end
            if( this.bDoubleClicked == 1 ) then
                this.bDoubleClicked = 0
            else
                return
            end
        end
    end

    -- If base class handled this work, then we're done
    if(gShellScreen_fnDefaultInputAccept(this)) then
        return
    end

    -- get the active team
    local team = ifs_freeform_main.playerTeam

    -- get the active planet
    local selected = ifs_freeform_main.planetSelected

    -- if the planet is friendly...
    if ifs_freeform_main.planetTeam[selected] == team then
        -- if the planet has no port...
        if ifs_freeform_main.planetPort[selected] ~= team then
            -- build a port (checks for resources)
            if this:BuildPort(team, selected) then
                ifs_freeform_main:PlayVoice(string.format(ifs_purchase_fleet_bought_port_sound, ifs_freeform_main.playerSide))
            else
                ifs_freeform_main:PlayVoice(string.format(ifs_purchase_fleet_broke_port_sound, ifs_freeform_main.playerSide))
            end
            -- else if the planet has no fleet...
        elseif not ifs_freeform_main:fleetOnTeamIsOnlyPresent(ifs_freeform_main.planetFleet[selected], team) then
            -- build a fleet (checks for resources)
            if this:BuildFleet(team, selected) then
                ifs_freeform_main:PlayVoice(string.format(ifs_purchase_fleet_bought_fleet_sound, ifs_freeform_main.playerSide))
            else
                ifs_freeform_main:PlayVoice(string.format(ifs_purchase_fleet_broke_fleet_sound, ifs_freeform_main.playerSide))
            end
        else
            ifs_freeform_main:PlayVoice(string.format(ifs_purchase_fleet_blocked_fleet_sound, ifs_freeform_main.playerSide))
        end

        ifs_freeform_main:UpdatePlayerText(this.player)
        ifs_freeform_main:UpdatePlanetInfo(this.info)
        this:UpdateAction()
    else
        ifs_freeform_main:PlayVoice(string.format(ifs_purchase_fleet_blocked_port_sound, ifs_freeform_main.playerSide))
    end

end

---------------------------
--  end ifs_freeform_purchase_fleet
---------------------------

---------------------------
--  begin ifs_freeform_focus
---------------------------

ifs_freeform_focus.Update = function(this, fDt)
    print("ifs_freeform_focus.Update")
    gIFShellScreenTemplate_fnUpdate(this, fDt) -- call base class

    -- update zoom values
    ifs_freeform_main:UpdateZoom()

    -- draw lanes
    ifs_freeform_main:DrawLanes(nil, nil)

    -- draw planet icons
    ifs_freeform_main:DrawPlanetIcons()

    --		-- draw port icons
    --		ifs_freeform_main:DrawPortIcons()

    -- draw fleet icons
    ifs_freeform_main:DrawFleetIcons(nil, false)
    if ifs_freeform_main.planetNext ~= ifs_freeform_main.planetSelected then
        if not ifs_freeform_main:fleetOnTeamIsOnlyPresent(ifs_freeform_main.planetFleet[ifs_freeform_main.planetNext], ifs_freeform_main.playerTeam) then
            ifs_freeform_main:DrawFleetIcon(ifs_freeform_main.planetNext, ifs_freeform_main.playerTeam, true, true)
        else
            --				ifs_freeform_main:DrawNonIcon(ifs_freeform_main.planetNext, ifs_freeform_main.playerTeam, true)
        end
    end
end

---------------------------
--  end ifs_freeform_focus
---------------------------

---------------------------
--  begin ifs_freeform_battle
---------------------------

ifs_freeform_battle.Enter = function(this, bFwd)
    print("ifs_freeform_battle.Enter")
    gIFShellScreenTemplate_fnEnter(this, bFwd) -- call default enter function

    ifs_freeform_main:SetZoom(2)
    MoveCameraToEntity(ifs_freeform_main.planetSelected .. "_camera")

    IFObj_fnSetVis(this.title, nil)

    -- remove player group
    IFObj_fnSetVis(this.player, nil)

    -- allow back only if coming from player fleet movement
    this.allowBack = ifs_freeform_main.joystick and ScriptCB_IsScreenInStack("ifs_freeform_fleet")

    -- update button status
    ifs_freeform_SetButtonVis( this, "back", this.allowBack )
    if ifs_freeform_main.joystick then
        ifs_freeform_SetButtonName( this, "accept", "ifs.freeform.attack" )
        ifs_freeform_SetButtonName( this, "back", "ifs.freeform.noattack" )
    else
        ifs_freeform_SetButtonName( this, "accept", "common.next" )
    end
    ifs_freeform_SetButtonVis( this, "misc", nil )
    ifs_freeform_SetButtonVis(this, "help", nil)

    -- play appropriate VO messages and display caption and info text
    --if it's a deep space battle
    if not ifs_freeform_main.planetTeam[ifs_freeform_main.planetSelected] then
        if ifs_freeform_main.joystick then
            ifs_freeform_main:PlayVoice(string.format(ifs_battle_fleet_sound, ifs_freeform_main.playerSide, "us"))
        else
            ifs_freeform_main:PlayVoice(string.format(ifs_battle_fleet_sound, ifs_freeform_main.teamCode[ifs_freeform_main.defendTeam], "them"))
        end
        IFObj_fnSetVis(this.info, true)
        IFText_fnSetString(this.info.caption, "ifs.freeform.spacebattle")
        IFObj_fnSetVis(this.info.text, false)
        --if it's a space battle over a planet
    elseif ifs_freeform_main:thereIsMoreThanOneFleet(ifs_freeform_main.planetFleet[ifs_freeform_main.planetSelected]) then
        if ifs_freeform_main.joystick then
            ifs_freeform_main:PlayVoice(string.format(ifs_battle_fleet_sound, ifs_freeform_main.playerSide, "us"))
        else
            ifs_freeform_main:PlayVoice(string.format(ifs_battle_fleet_sound, ifs_freeform_main.teamCode[ifs_freeform_main.defendTeam], "them"))
        end
        IFObj_fnSetVis(this.info, true)
        IFText_fnSetString(this.info.text, "ifs.freeform.planetdesc." .. ifs_freeform_main.planetSelected)
        IFObj_fnSetVis(this.info.text, true)
        IFText_fnSetUString(this.info.caption,
                ScriptCB_usprintf("ifs.freeform.fleetbattle",
                        ScriptCB_getlocalizestr("planetname." .. ifs_freeform_main.planetSelected)
                )
        )
        --if it's a planet battle
    else
        if ifs_freeform_main.joystick then
            ifs_freeform_main:PlayVoice(string.format(ifs_battle_planet_sound, ifs_freeform_main.playerSide, ifs_freeform_main.planetSelected, "us"))
        else
            ifs_freeform_main:PlayVoice(string.format(ifs_battle_planet_sound, ifs_freeform_main.teamCode[ifs_freeform_main.defendTeam], ifs_freeform_main.planetSelected, "them"))
        end
        IFObj_fnSetVis(this.info, 1)
        IFText_fnSetString(this.info.text, "ifs.freeform.planetdesc." .. ifs_freeform_main.planetSelected)
        IFObj_fnSetVis(this.info.text, true)
        IFText_fnSetUString(this.info.caption,
                ScriptCB_usprintf("ifs.freeform.planetbattle",
                        ScriptCB_getlocalizestr("planetname." .. ifs_freeform_main.planetSelected)
                )
        )
    end

    -- if in soak mode...
    if ifs_freeform_main.soakMode then
        -- start a display timer
        this.displayTimer = 5
    end
end

---------------------------
--  end ifs_freeform_battle
---------------------------

---------------------------
--  begin ifs_freeform_battle_mode
---------------------------
ifs_freeform_battle_mode.Enter = function(this, bFwd)
    print("ifs_freeform_battle_mode.Enter")
    gIFShellScreenTemplate_fnEnter(this, bFwd) -- call default enter function

    ifs_freeform_SetButtonVis( this, "back", nil )
    ifs_freeform_SetButtonVis( this, "misc", nil )
    ifs_freeform_SetButtonVis( this, "help", nil )
    ifs_freeform_SetButtonName( this, "accept", "ifs.freeform.pickmode" )

    -- get the appropriate map mode list
    this.modes = (ifs_freeform_main:thereIsMoreThanOneFleet(ifs_freeform_main.planetFleet[ifs_freeform_main.planetSelected]))
            and ifs_freeform_main.spaceMission or ifs_freeform_main.planetMission[ifs_freeform_main.planetSelected]

    -- switch to other player
    if ifs_freeform_main.joystick_other then
        this.originalTeam = ifs_freeform_main.playerTeam
        ifs_freeform_main:SetActiveTeam(ifs_freeform_main.defendTeam)
    end

    -- skip if there is only one mode
    local count = 0
    for mode, mission in pairs(this.modes) do
        count = count + 1
    end
    if count <= 1 then
        this:Input_Accept()
        return
    end

    ifs_freeform_main:PlayVoice(string.format(ifs_battle_mode_enter_sound, ifs_freeform_main.playerSide))

    this.PrevButton = nil

    IFObj_fnSetVis(this.title, nil)
    IFText_fnSetUString(this.title.text,
            ScriptCB_usprintf("ifs.freeform.defendmode",
                    ScriptCB_getlocalizestr(ifs_freeform_main.teamName[ifs_freeform_main.playerTeam])
            )
    )

    ifs_freeform_main:UpdatePlayerText(this.player)

    -- show only buttons corresponding to game modes
    for _, desc in ipairs(ifs_freeform_battle_vbutton_layout.buttonlist) do
        this.buttons[desc.tag].hidden = not this.modes[desc.tag]
    end

    -- show the button list
    this.CurButton = ShowHideVerticalButtons(this.buttons,ifs_freeform_battle_vbutton_layout)
    SetCurButton(this.CurButton)
end
---------------------------
--  end ifs_freeform_battle_mode
---------------------------

---------------------------
--  begin ifs_freeform_battle_card
---------------------------

ifs_freeform_battle_card.Next = function(this)
    print("ifs_freeform_battle_card.Next")
    if this.defending then
        -- switch to the attacker
        this.defending = nil
        ifs_freeform_main:SetActiveTeam(ifs_freeform_main.attackTeam)

        -- restore split screen
        ScriptCB_SetSplitscreen(ifs_freeform_main.wasSplit)

        -- save state
        ifs_freeform_main:SaveState()

        -- save mission setup
        ifs_freeform_main:SaveMissionSetup()

        -- if in soak mode...
        if ifs_freeform_main.soakMode then
            -- enter the selected mission as a demo
            ScriptCB_LaunchDemo(ifs_freeform_main.launchMission)
        else
            -- enter the selected mission
            ScriptCB_EnterMission()
        end
    else
        -- switch to the defender
        this.defending = true
        ifs_freeform_main:SetActiveTeam(ifs_freeform_main.defendTeam)

        -- re-enter as the defender
        ScriptCB_PushScreen("ifs_freeform_battle_card")
    end
end

---------------------------
--  end ifs_freeform_battle_card
---------------------------

---------------------------
--  begin ifs_freeform_result
---------------------------

ifs_freeform_result.Enter = function(this, bFwd)
    print("ifs_freeform_result.Enter")
    gIFShellScreenTemplate_fnEnter(this, bFwd) -- call default enter function

    ifs_freeform_main:SetZoom(2)
    MoveCameraToEntity(ifs_freeform_main.planetSelected .. "_camera")
    SnapMapCamera()


    IFObj_fnSetVis(this.info, false)

    IFText_fnSetString(this.title.text, "ifs.freeform.battleresult")

    --		--display appropriate caption
    --		--if it's a space battle over a planet
    --		if ifs_freeform_main.planetFleet[ifs_freeform_main.planetSelected] == 0 then
    --			IFText_fnSetUString(this.title.text,
    --				ScriptCB_usprintf("ifs.freeform.resultstring",
    --					ScriptCB_getlocalizestr("planetname." .. ifs_freeform_main.planetSelected),
    --					ScriptCB_getlocalizestr("ifs.freeform.spacebattleresult")
    --				)
    --			)
    --		--if it's a planet or deep-space battle
    --		else
    --			IFText_fnSetUString(this.title.text,
    --				ScriptCB_usprintf("ifs.freeform.resultstring",
    --					ScriptCB_getlocalizestr("planetname." .. ifs_freeform_main.planetSelected),
    --					ScriptCB_getlocalizestr("ifs.freeform.battleresult")
    --				)
    --			)
    --		end

    ifs_freeform_SetButtonVis(this, "back", nil)
    ifs_freeform_SetButtonVis(this, "misc", nil)
    ifs_freeform_SetButtonName(this, "accept", "ifs.freeform.done")
    ifs_freeform_SetButtonVis(this, "help", nil)


    IFObj_fnSetVis(this.player, nil)

    if bFwd then
        -- if the active team won...
        if ifs_freeform_main.playerTeam == ifs_freeform_main.winnerTeam then
            -- if the battle was a fleet battle...
            if ifs_freeform_main.fleetBattle then
                -- play appropriate VO
                if ifs_freeform_main.joystick then
                    ifs_freeform_main:PlayVoice(string.format(ifs_result_fleet_won_sound, ifs_freeform_main.playerSide))
                else
                    ifs_freeform_main:PlayVoice(string.format(ifs_result_fleet_lost_sound, ifs_freeform_main.teamCode[ifs_freeform_main.defendTeam]))
                end
            else
                -- play appropriate VO
                if ifs_freeform_main.joystick then
                    ifs_freeform_main:PlayVoice(string.format(ifs_result_planet_won_sound, ifs_freeform_main.playerSide, ifs_freeform_main.planetSelected))
                else
                    ifs_freeform_main:PlayVoice(string.format(ifs_result_planet_lost_sound, ifs_freeform_main.teamCode[ifs_freeform_main.defendTeam], ifs_freeform_main.planetSelected))
                end
            end
        else
            -- play appropriate VO
            if ifs_freeform_main.joystick then
                ifs_freeform_main:PlayVoice(string.format(ifs_result_fleet_lost_sound, ifs_freeform_main.playerSide))
            elseif ifs_freeform_main.fleetBattle then
                ifs_freeform_main:PlayVoice(string.format(ifs_result_fleet_defend_sound, ifs_freeform_main.teamCode[ifs_freeform_main.defendTeam]))
            else
                ifs_freeform_main:PlayVoice(string.format(ifs_result_planet_defend_sound, ifs_freeform_main.teamCode[ifs_freeform_main.defendTeam], ifs_freeform_main.planetSelected))
            end
        end
    end

    -- update player results
    this:UpdateResult(this.player_result, ifs_freeform_main.playerTeam, ifs_freeform_main.joystick)
    this:UpdateResult(this.enemy_result, ifs_freeform_main.defendTeam, ifs_freeform_main.joystick_other)

    -- if in soak mode...
    if ifs_freeform_main.soakMode then
        -- start a display timer
        this.displayTimer = 5
    end

    -- prompt for save if necessary
    ifs_freeform_main:PromptSave()
end

-- Input_Accept
ifs_freeform_result.Input_Accept = function(this, joystick)
    print("ifs_freeform_result.Input_Accept")
    if(gPlatformStr == "PC") then
        --print( "this.CurButton = ", this.CurButton )
        if( this.CurButton == "_accept" ) then
            -- purchase the item
        else
            return
        end
    end

    ifelm_shellscreen_fnPlaySound(this.acceptSound)

    -- if the player just won a fleet battle over an enemy planet...
    if ifs_freeform_main:fleetOnTeamIsOnlyPresent(ifs_freeform_main.planetFleet[ifs_freeform_main.planetNext], ifs_freeform_main.playerTeam)
            and ifs_freeform_main.planetTeam[ifs_freeform_main.planetNext] ~= ifs_freeform_main.playerTeam
            and ifs_freeform_main.planetTeam[ifs_freeform_main.planetNext] ~= 0
            and ifs_freeform_main.planetTeam[ifs_freeform_main.planetNext] ~= nil
            then
        -- go to the battle screen again
        ScriptCB_PopScreen()
        ScriptCB_PushScreen("ifs_freeform_battle")
    else
        -- go to the summary screen
        ScriptCB_PushScreen("ifs_freeform_summary")
    end
end

---------------------------
--  end ifs_freeform_result
---------------------------

---------------------------
--  begin ifs_freeform_sides
---------------------------

ifs_freeform_sides.Enter = function(this, bFwd)
    print("ifs_freeform_sides.Enter")
    gIFShellScreenTemplate_fnEnter(this, bFwd) -- call default enter function

    -- read all controllers
    this.wasRead = ScriptCB_ReadAllControllers(1)

    -- zoom all the way out
    ifs_freeform_main:SetZoom(0)

    -- set side titles
    IFText_fnSetString(this.team1.text, ifs_freeform_main.teamName[1])
    IFText_fnSetString(this.team2.text, ifs_freeform_main.teamName[2])

    -- set side icons
    IFImage_fnSetTexture(this.team1.icon, "seal_" .. ifs_freeform_main.teamCode[1])
    IFObj_fnSetColor(this.team1.icon, ifs_freeform_main:GetTeamColor(1))
    IFImage_fnSetTexture(this.team2.icon, "seal_" .. ifs_freeform_main.teamCode[2])
    IFObj_fnSetColor(this.team2.icon, ifs_freeform_main:GetTeamColor(2))

    -- for each controller...
    this.controllerTeam = {}
    this.controllerReady = {}
    local controllers = ScriptCB_GetMaxControllers()
    for controller = 0,controllers-1 do
        -- if the controller is bound...
        if ScriptCB_IsControllerBound(controller+1) then
            -- set as not ready
            this:SetPlayerReady(controller, 0)

            -- set team
            this:SetPlayerTeam(controller, ifs_freeform_main.controllerTeam[controller])

            -- show name
            IFText_fnSetUString(this.players[controller], ScriptCB_GetProfileName(controller+1))
            IFObj_fnSetVis(this.players[controller], 1)
        else
            -- hide name
            IFObj_fnSetVis(this.players[controller], nil)
        end
    end
end

---------------------------
--  end ifs_freeform_sides
---------------------------

---------------------------
--  begin ifs_freeform_end
---------------------------

ifs_freeform_end.Enter = function(this)
    print("ifs_freeform_end.Enter")
    gIFShellScreenTemplate_fnEnter(this, bFwd)

    -- switch teams if on the AI's turn
    --TODO figure out if this is right (setting to defendTeam or some other team)
    if not ifs_freeform_main.joystick and ifs_freeform_main.joystick_other then
        ifs_freeform_main:SetActiveTeam(ifs_freeform_main.defendTeam)
    end

    -- if the active player won...
    if ifs_freeform_main.teamVictory == ifs_freeform_main.playerTeam then
        -- show the victory display
        IFImage_fnSetUVs(this.message.image, 0, 0, 1, 0.5)
    else
        -- show the defeat display
        IFImage_fnSetUVs(this.message.image, 0, 0.5, 1, 1)
    end

    -- set the appropriate color
    IFObj_fnSetColor(this.message.image, ifs_freeform_main:GetTeamColor(ifs_freeform_main.teamVictory))

    -- set the message text
    local sideVictory = ifs_freeform_main.teamCode[ifs_freeform_main.teamVictory]
    IFText_fnSetString(this.message.text, "ifs.freeform.victory." .. sideVictory)

    -- set alpha to zero
    IFObj_fnSetVis(this.message, true)
    IFObj_fnSetAlpha(this.message.image, 0)
    IFObj_fnSetAlpha(this.message.text, 0)

    -- play a movie
    gMovieAlwaysPlay = 1
    ScriptCB_CloseMovie()
    ScriptCB_OpenMovie(gMovieStream, "")
    ifelem_shellscreen_fnStartMovie("gcwin" .. sideVictory .. "1", 0, nil, 1)
    if ScriptCB_IsMoviePlaying() then
        this.moviePlaying = true
        ScriptCB_EnableScene(false)
        ScriptCB_SetShellMusic()
        ScriptCB_SndBusFade("shellfx", 0.0, 0.0)
        StopAudioStream(gVoiceOverStream, 0)
        StopAudioStream(gMusicStream, 0)
    else
        this.moviePlaying = false
    end

    -- display timer
    this.displayTimer = 0
end

---------------------------
--  end ifs_freeform_end
---------------------------